# This project is a recreation of the project excel-tally-production-first.
# That project is having some issues with electron-forge.
# We will use the project.cmd file from there and create this new project

# Create the project folder:

mkdir excel-tally-production
cd excel-tally-production
lerna init
touch project.txt

excel-tally-production/ $ ls
lerna.json	package.json	packages	project.txt
excel-tally-production/ $

# Set up the packages
mkdir packages/apps

## Create electron application
#

# Now we will create the electron app manually and verify the behaviour
$ cd packages/apps
$ npx create-electron-app electron-tally

# https://github.com/electron/forge/issues/869
Modify excel-tally-production/package.json
{
  "name": "root",
  "private": true,
  "workspaces": {
    "packages": [
      "packages/apps/*"
    ],
    "nohoist": [
      "**/electron**"
    ]
  },

  "devDependencies": {
    "lerna": "^6.4.1"
  }
}

# We can see that our package is listed correctly.
excel-tally-production/ $ lerna list
electron-tally
excel-tally-production/ $

$ cd packages/apps/electron-tally
$ npm start

It is working!

## Create react application
#

lerna  create react-ui --yes
mv packages/react-ui packages/apps
cd packages/apps/react-ui
npx create-react-app .

# We can see that the hoisting has been achieved, so our nohoist flag hasn't worked!
apps/ $ du -d 1 -h
4.3M	./react-ui
 28K	./electron-tally
4.3M	.
apps/ $

# The react-app scaffold is working !

Now we will add support for react app which in development mode
$ npm install electron-is-dev

const isDev = require('electron-is-dev');

  if (isDev) {
    const clientPort = 3000;
    mainWindow.loadURL(`http://localhost:${clientPort}`)
        .then(response => {

        })
        .catch(error => {
          if (error.code === 'ERR_CONNECTION_REFUSED') {
            mainWindow.loadFile(path.join(__dirname, 'error.html'));
            return;
          }

          throw error;
        });
  } else {
    mainWindow.loadFile(path.join(__dirname, 'index.html'));
  }

# Now we will modify the <project> package.json

# error.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title>Hello World!</title>
    <link rel="stylesheet" href="index.css" />
</head>
<body>
<h1>ðŸ’– Hello World!</h1>
<p>This application depends on a react application.</p>
<p>You should try running this from container project</p>
</body>
</html>

# Now we will add the scripts in <project>/package.json to run the two together:

  "scripts": {
    "react-ui:no-browser": "cross-env BROWSER=none npm run react-ui",
    "react-ui": "lerna run start --scope=react-ui",
    "electron-app:after:react-ui": "wait-on tcp:3000 && npm run electron-app",
    "electron-app": "lerna run start --scope=electron-tally",
    "start": "concurrently -k \"npm run react-ui:no-browser\" \"npm run electron-app:after:react-ui\" "
  },

npm install --save-dev  concurrently wait-on cross-env

# Commit
git remote add origin git@github.com:neeraj76/excel-tally-app.git
git push -u origin master

# We have commited the development app for electron and react
# We can start the app using
npm start


