# This project is a recreation of the project excel-tally-production-first.
# That project is having some issues with electron-forge.
# We will use the project.cmd file from there and create this new project

# Create the project folder:

mkdir excel-tally-production
cd excel-tally-production
lerna init
touch project.txt

excel-tally-production/ $ ls
lerna.json	package.json	packages	project.txt
excel-tally-production/ $

# Set up the packages
mkdir packages/apps

## Create electron application
#

# Now we will create the electron app manually and verify the behaviour
$ cd packages/apps
$ npx create-electron-app electron-tally

# https://github.com/electron/forge/issues/869
Modify excel-tally-production/package.json
{
  "name": "root",
  "private": true,
  "workspaces": {
    "packages": [
      "packages/apps/*"
    ],
    "nohoist": [
      "**/electron**"
    ]
  },

  "devDependencies": {
    "lerna": "^6.4.1"
  }
}

# We can see that our package is listed correctly.
excel-tally-production/ $ lerna list
electron-tally
excel-tally-production/ $

$ cd packages/apps/electron-tally
$ npm start

It is working!

## Create react application
#

lerna  create react-ui --yes
mv packages/react-ui packages/apps
cd packages/apps/react-ui
npx create-react-app .

# We can see that the hoisting has been achieved, so our nohoist flag hasn't worked!
apps/ $ du -d 1 -h
4.3M	./react-ui
 28K	./electron-tally
4.3M	.
apps/ $

# The react-app scaffold is working !

Now we will add support for react app which in development mode
$ npm install electron-is-dev

const isDev = require('electron-is-dev');

  if (isDev) {
    const clientPort = 3000;
    mainWindow.loadURL(`http://localhost:${clientPort}`)
        .then(response => {

        })
        .catch(error => {
          if (error.code === 'ERR_CONNECTION_REFUSED') {
            mainWindow.loadFile(path.join(__dirname, 'error.html'));
            return;
          }

          throw error;
        });
  } else {
    mainWindow.loadFile(path.join(__dirname, 'index.html'));
  }

# Now we will modify the <project> package.json

# error.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title>Hello World!</title>
    <link rel="stylesheet" href="index.css" />
</head>
<body>
<h1>ðŸ’– Hello World!</h1>
<p>This application depends on a react application.</p>
<p>You should try running this from container project</p>
</body>
</html>

# Now we will add the scripts in <project>/package.json to run the two together:

  "scripts": {
    "react-ui:no-browser": "cross-env BROWSER=none npm run react-ui",
    "react-ui": "lerna run start --scope=react-ui",
    "electron-app:after:react-ui": "wait-on tcp:3000 && npm run electron-app",
    "electron-app": "lerna run start --scope=electron-tally",
    "start": "concurrently -k \"npm run react-ui:no-browser\" \"npm run electron-app:after:react-ui\" "
  },

npm install --save-dev  concurrently wait-on cross-env

# Commit
git remote add origin git@github.com:neeraj76/excel-tally-app.git
git push -u origin master

# We have commited the development app for electron and react
# We can start the app using
npm start

## Use react build from electron application
Target:
i) create production build for react
ii) access the production target from electron-app

# react production build
$ cd packages/apps/react-ui

$ npm run build
$ npm install --save-dev http-server

# We will create a deployment target which uses production js
"deploy": "http-server -c 1 ./build"

# We have set the caching for one second
react-ui/ $ npm run deploy

> react-ui@0.1.0 deploy
> http-server -c 1 ./build

Starting up http-server, serving ./build

http-server version: 14.1.1

http-server settings:
CORS: disabled
Cache: 1 seconds
Connection Timeout: 120 seconds
Directory Listings: visible
AutoIndex: visible
Serve GZIP Files: false
Serve Brotli Files: false
Default File Extension: none

Available on:
  http://127.0.0.1:8080
  http://192.168.1.100:8080
Hit CTRL-C to stop the server

# The build is working fine when accessed using http-server. Now we have to test it in the electron app.
# We will hardcode isDev to false and then check

  if (isDev && false) {
    :
  } else {
    const uiPackage = `react-ui`;
    const packagePath = path.join(__dirname, `../node_modules/${uiPackage}/build/index.html`);
    console.log('packagePath:', packagePath);
    mainWindow.loadURL(`file://${packagePath}`);
  }

# We get the error:
(node:32496) electron: Failed to load URL: file:///Users/neeraj/Projects/Glassball/Production/excel-tally-production/packages/apps/electron-tally/node_modules/react-ui/build/index.html with error: ERR_FILE_NOT_FOUND
# This will not work as the package is hoisted, we will have to use require.resolve
require.resolve('react-ui/build/index.html')

# We also have to do
lerna add react-ui --scope=electron-tally
# Now we will verify results of require.resolve()
# The require.resolve is not working seamlessly.

We will try and use it from the package

## Packages with electron-builder
# Now we will use the electron-builder for building the packages

$ cd packages/apps/electron-tally
npm install --save-dev electron-builder

lerna run build-installer:m --scope=electron-tally

# Note the npm one is not working: npm run build-installer:m
To use the electron-builder, electron-forge etc we have to use in the <project> package.json
  "workspaces": {
    "packages": [
      "packages/apps/*"
    ],
    "nohoist": [
      "electron",
      "electron/**",
      "electron-squirrel-startup",
      "electron-squirrel-startup/**",
      "@electron-forge",
      "@electron-forge/**"
    ]
  },

# Our build is created we have to use npx asar to see package contents
npx asar extract app.asar ~/tmp

# This shows that we haven't put the dist folder in app.asar but the src and the other folders. We need to fix this problem

# we can see that react-tally-ui is added as dependency in electron-app

electron-tally/ $ npm list react-tally-ui
root@ /Users/neeraj/Projects/Glassball/Production/excel-tally-production
â””â”€â”¬ electron-tally@0.0.1 -> ./packages/apps/electron-tally
  â””â”€â”€ react-tally-ui@0.1.0 -> ./packages/apps/react-tally-ui

electron-tally/ $

# electron-tally/package.json
  "scripts": {
:
    "build-installer:m": "electron-builder -m",
    "build": "npm run build-installer:m"
  },

  "build": {
    "appId": "com.glassball.tallymate",
    "productName": "TallyMate",
    "copyright": "Neeraj Gupta",
    "files": [
      "src/**/*"
      "node_modules/**/*",
      "!node_modules/react-tally-ui/src",
    ],
    "mac": {
      "identity": null,
      "target": [
        {
          "target": "default",
          "arch": [
            "universal"
          ]
        }
      ]
    }
  }


$ npm run build

$ mkdir ~/tmp
$ cd ~/tmp
$ npx asar extract /Users/neeraj/Projects/Glassball/Production/excel-tally-production/packages/apps/electron-tally/dist/mac-universal/TallyMate.app/Contents/Resources/app.asar .

Commands to make package .dmg
lerna run build --scope=react-tally-ui
lerna run build --scope=electron-tally

Added script to build both apps
"build": "lerna run build --scope=react-tally-ui && lerna run build --scope=electron-tally"


# We have the package built successfully !

# After using loadFile our production mode is working correctly

## React App Tally
#
# Now we will start writing the code for Tally App
$ lerna add @glassball/table --scope=react-tally-app

# The app is working. We are seeing one problem
Problem: The CSS resizers are not there.
Unexpected: There is no CSS file generated.

# We need to look into it.
Upon looking at the element using 'Inspect element' from the browser we can see that the resizer css is not being applied.
Our first point of investigation is rollup as it is not producing css files.

# Update the library in the application
Modify to the new version in package.json
npm install

# disabling the modules has fixed the problem !

## We have added the @glassball/excel library.
# Now we will add it in the project.
lerna add @glassball/excel --scope=react-tally-ui

# Verify using the following command:
npm list @glassball/excel

# We have add the ReadExcel component in the library. Now we will test it
lerna add @glassball/read-excel --scope=react-tally-ui
lerna bootstrap

# We ran into the electron builder issue again
Temporary Resolution: Install electron-builder globally with  -g
npm install electron-builder -g

# TBD:
We will come back later and resolve the electron-builder issue.

# We are still blocked on the problem
We will come back later!

# So right now we will proceed with component integration

## Add the react-bootstrap Tabs

[# electron-builder problem]
We are getting electron-builder not found when we are doing 'npm run build'
# https://stackoverflow.com/questions/67833794/npm-err-could-not-determine-executable-to-run
rm -rf .git/hooks
! Did not work

cd packages/apps/electron-tally
# also created a local folder node_modules which was empty
npm install electron-builder
npm run build

# It worked, but we have to monitor if this is a reliable solution.

# Next time also the same thing:
It seems the node_modules folder should be present.
Even an empty node_modules folder works!
So we will keep that in mind for future.

# We have confirmed this. It is the cause. We will see if there is a proper resolution for this in future.
# Tried removing the yarn.lock. It didn't help we have concluded that node_modules is the issue. This is probably problem with electron-forge.

## Include tally support in electron app via a library. This means we have to first extract the library and then include it in electron app

# We have created library @glassball/tally. Now we will add it in our electron-tally application
lerna add @glassball/tally --scope=@glassball/tallymate
lerna add axios --scope=@glassball/tallymate
lerna add date-fns  --scope=@glassball/tallymate


## Add the communication with the Client
#
We will add the communication with react client.
